# syntax=docker/dockerfile:experimental

FROM node:18-alpine as base

# ENV NODE_ENV=development
ENV husky_skip_init="1"
ENV HUSKY_DEBUG="1"
#ENV NODE_OPTIONS="--max_old_space_size=4000 --openssl-legacy-provider"
ENV NODE_OPTIONS="--max_old_space_size=4000"

#TODO review env varables

ARG HOST
ENV HOST=${HOST}

ARG CI
ENV CI_ENV=${CI}

WORKDIR /app

FROM base as builder

RUN apk add --no-cache curl python3 py3-setuptools
RUN curl -sf https://gobinaries.com/tj/node-prune | sh
RUN echo "npm cache clean --force && node-prune" > /usr/local/bin/node-clean && chmod +x /usr/local/bin/node-clean

RUN apk add --no-cache build-base

ARG NEW_API_URL
ENV VITE_NEW_API_URL_ENV=${NEW_API_URL}
ENV REACT_APP_NEW_API_URL_ENV=${NEW_API_URL}

COPY ./package.json /app/package.json
COPY ./package-lock.json /app/package-lock.json

COPY ./packages/admin/package.json /app/packages/admin/package.json
COPY ./packages/scanner/package.json /app/packages/scanner/package.json

RUN --mount=type=cache,sharing=locked,target=/root/.npm \
    npm ci

COPY . /app

RUN echo $(date +"%Y-%m-%dT%H:%M:%S") > /app/packages/scanner/src/pwa-ver.txt

RUN --mount=type=cache,sharing=locked,target=/root/.npm \
    npm run build

# RUN RUN npm prune --production

# RUN /usr/local/bin/node-clean

FROM base as runner

EXPOSE 80

RUN apk add --no-cache nginx
COPY nginx.conf /etc/nginx/nginx.conf

ARG NEW_API_URL
ENV NEW_API_URL_ENV=${NEW_API_URL}
ENV REACT_APP_NEW_API_URL_ENV=${NEW_API_URL}
ARG ADMIN_BASE_PATH
ENV ADMIN_BASE_PATH_ENV=${ADMIN_BASE_PATH}

COPY --from=builder /app/postcss.config.js /app/
COPY --from=builder /app/tsconfig.json /app/
COPY --from=builder /app/tsconfig.paths.json /app/
COPY --from=builder /app/package.json /app/

COPY --from=builder /app/packages/admin/dist/ /app/packages/admin/dist/

COPY --from=builder /app/packages/scanner/package.json /app/packages/scanner/
COPY --from=builder /app/packages/scanner/build/ /app/packages/scanner/build/

CMD nginx
