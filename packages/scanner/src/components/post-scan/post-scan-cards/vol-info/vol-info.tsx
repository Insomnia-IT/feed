import type { FC } from 'react';
import dayjs from 'dayjs';

import type { Arrival, Volunteer } from '~/db';
import { Text } from '~/shared/ui/typography';

import css from './vol-info.module.css';

const today = dayjs();

// –ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞: –ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∑–∞–µ–∑–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Ö–æ–¥–∏—Ç ¬´—Å–µ–≥–æ–¥–Ω—è¬ª. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π (–ø—Ä–æ—à–ª—ã–π –∏–ª–∏ –±—É–¥—É—â–∏–π). –ò —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
const calculateTargetArrivalDatesText = (arrivals: Array<Arrival>): string => {
    let targetDates: { start: ReturnType<typeof dayjs>; end: ReturnType<typeof dayjs> } | undefined;

    for (const arrival of arrivals) {
        const start = dayjs(arrival.arrival_date);
        const end = dayjs(arrival.departure_date);

        // –î—Ä—É–≥–æ–π –≥–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        if (!start.isSame(today, 'year')) {
            continue;
        }

        // –°–µ–≥–æ–¥–Ω—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞/–æ—Ç—ä–µ–∑–¥–∞ –∏–ª–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
        if (start.isSame(today, 'date') || end.isSame(today, 'date') || (start.isBefore(today) && end.isAfter(today))) {
            targetDates = { start, end };

            break;
        }

        // –ù–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–∞–µ–∑–¥–∞ - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–µ–∑–¥.
        if (!targetDates) {
            targetDates = { start, end };
            continue;
        }

        const targetArrivalStart = targetDates.start;
        const targetArrivalEnd = targetDates.end;

        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–µ–∑–¥–∞ –±–ª–∏–∂–µ –∫ —Å–µ–≥–æ–¥–Ω—è - —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ü–µ–ª–µ–≤—ã–º.
        if (
            Math.abs(today.diff(targetArrivalEnd)) > Math.abs(today.diff(start)) &&
            Math.abs(today.diff(targetArrivalStart)) > Math.abs(today.diff(start))
        ) {
            targetDates = { start, end };
        }
    }

    if (!targetDates) {
        return '(–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞)';
    }

    return `(${targetDates.start.format('DD MMMM')} - ${targetDates.end.format('DD MMMM')})`;
};

export const VolInfo: FC<{
    vol: Volunteer;
}> = ({ vol }) => {
    const { arrivals, directions, first_name, name } = vol;

    const feedTypeText = vol.is_vegan ? '–í–µ–≥–∞–Ωü•¶' : '–ú—è—Å–æ–µ–¥ü•©';
    const directionsText = directions.map((direction) => direction.name).join(', ');
    const arrivalDatesText = calculateTargetArrivalDatesText(arrivals);

    return (
        <div className={css.volInfo}>
            <Text className={css.text}>
                {first_name} ({name}), {feedTypeText}, {directionsText} {arrivalDatesText}
            </Text>
        </div>
    );
};
