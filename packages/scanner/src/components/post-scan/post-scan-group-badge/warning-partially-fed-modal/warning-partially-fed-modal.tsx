import { Button } from '~/shared/ui/button';
import { Modal } from '~/shared/ui/modal';
import { Text } from '~/shared/ui/typography';
import type { ValidatedVol } from '~/components/post-scan/post-scan-group-badge/post-scan-group-badge.lib';
import type { TransactionJoined } from '~/db';
import { getPlural } from '~/shared/lib/utils';
import { calculateAlreadyFedCount } from '~/components/post-scan/post-scan.utils';

import style from './warning-partially-fed-modal.module.css';

// –£–∂–µ –ø–æ–∫–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã
const WarningPartiallyFedModal: React.FC<{
    showModal: boolean;
    setShowModal: (isShown: boolean) => void;
    greenVols: Array<ValidatedVol>;
    alreadyFedTransactions: Array<TransactionJoined>;
    doFeedAnons: (value: { vegansCount: number; nonVegansCount: number }) => void;
}> = ({ alreadyFedTransactions, doFeedAnons, greenVols, setShowModal, showModal }) => {
    const onClose = (): void => {
        setShowModal(false);
    };

    const { nonVegans: nonVegansVols, vegans: vegansVols } = reduceVegans<ValidatedVol>(greenVols);
    const { nonVegans: nonVegansTransactions, vegans: vegansTransactions } =
        reduceVegans<TransactionJoined>(alreadyFedTransactions);

    const alreadyFedVegansCount = calculateAlreadyFedCount(vegansTransactions);
    const alreadyFedNonVegansCount = calculateAlreadyFedCount(nonVegansTransactions);

    // –°–∫–æ–ª—å–∫–æ –Ω–µ –ø–æ–∫–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –≤–µ–≥–∞–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –±–µ–π–¥–∂–µ
    const leftVegans = vegansVols.length - alreadyFedVegansCount;
    // –°–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–µ–≥–∞–Ω–æ–≤ –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–æ –±–µ–π–¥–∂—É
    const vegansOverFed = Math.min(0, leftVegans) * -1;

    // –°–∫–æ–ª—å–∫–æ –Ω–µ –ø–æ–∫–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –º—è—Å–æ–µ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –±–µ–π–¥–∂–µ
    const leftMeats = nonVegansVols.length - alreadyFedNonVegansCount;
    // –°–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º—è—Å–æ–µ–¥–æ–≤ –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–æ –±–µ–π–¥–∂—É
    const meatsOverFed = Math.min(0, leftMeats) * -1;

    // –ò—Ç–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–∞–∫: –æ—Å—Ç–∞–ª–æ—Å—å <—Ç–∏–ø–∞> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–æ—Ä–º–ª–µ–Ω–Ω—ã–µ <–¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞>
    // –°–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏ —Ç–µ—Ö –∏ –¥—Ä—É–≥–∏—Ö, –ø–æ –∏–¥–µ–µ, –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≥–¥–∞ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –Ω—É–ª–µ
    const finalVegans = Math.max(leftVegans - meatsOverFed, 0);
    const finalMeats = Math.max(leftMeats - vegansOverFed, 0);

    const primaryAction = (): void => {
        doFeedAnons({ vegansCount: finalVegans, nonVegansCount: finalMeats });
        onClose();
    };

    return (
        <Modal title='–ß–∞—Å—Ç—å —É–∂–µ –ø–æ–∫–æ—Ä–º–∏–ª–∏' active={showModal} onClose={onClose} classModal={style.modal}>
            <div className={style.body}>
                <div>
                    <Text>–ü–æ–∫–æ—Ä–º–ª–µ–Ω—ã {alreadyFedVegansCount + alreadyFedNonVegansCount}:</Text>
                    {alreadyFedNonVegansCount > 0 && (
                        <Text>
                            {alreadyFedNonVegansCount}{' '}
                            {getPlural(alreadyFedNonVegansCount, ['–ú—è—Å–æ–µ–¥', '–ú—è—Å–æ–µ–¥–∞', '–ú—è—Å–æ–µ–¥–æ–≤'])} ü•©
                        </Text>
                    )}
                    {alreadyFedVegansCount > 0 && (
                        <Text>
                            {alreadyFedVegansCount} {getPlural(alreadyFedVegansCount, ['–í–µ–≥–∞–Ω', '–í–µ–≥–∞–Ω–∞', '–í–µ–≥–∞–Ω–æ–≤'])}{' '}
                            ü•¶
                        </Text>
                    )}
                </div>
                <div>
                    <Text>–û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø–æ–∫–æ—Ä–º–ª–µ–Ω—ã {finalVegans + finalMeats}:</Text>
                    {finalMeats > 0 && (
                        <Text>
                            {finalMeats} {getPlural(finalMeats, ['–ú—è—Å–æ–µ–¥', '–ú—è—Å–æ–µ–¥–∞', '–ú—è—Å–æ–µ–¥–æ–≤'])} ü•©
                        </Text>
                    )}
                    {finalVegans > 0 && (
                        <Text>
                            {finalVegans} {getPlural(finalVegans, ['–í–µ–≥–∞–Ω', '–í–µ–≥–∞–Ω–∞', '–í–µ–≥–∞–Ω–æ–≤'])} ü•¶
                        </Text>
                    )}
                </div>
                <Button variant='secondary' onClick={onClose}>
                    –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={primaryAction}>–ü–æ–∫–æ—Ä–º–∏—Ç—å</Button>
            </div>
        </Modal>
    );
};

const reduceVegans = <T extends { is_vegan?: boolean }>(
    values: Array<T>
): { vegans: Array<T>; nonVegans: Array<T> } => {
    return values.reduce<{ vegans: Array<T>; nonVegans: Array<T> }>(
        (prev: { vegans: Array<T>; nonVegans: Array<T> }, volunteer) => {
            const next = { ...prev };

            if (volunteer.is_vegan) {
                next.vegans.push(volunteer);
            } else {
                next.nonVegans.push(volunteer);
            }

            return next;
        },
        { vegans: [], nonVegans: [] } as { vegans: Array<T>; nonVegans: Array<T> }
    );
};

export { WarningPartiallyFedModal };
